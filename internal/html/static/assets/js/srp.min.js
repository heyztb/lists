class e{rid=0;promises=new Map;worker=new Worker("/assets/js/worker.min.js");ready=new Promise((e=>{this.worker.addEventListener("message",(s=>"ready"===s.data&&e(!0)),{once:!0})}));constructor(){this.ready.then((()=>this.worker.onmessage=e=>{const[s,r,i]=e.data,[t,o]=this.promises.get(s);this.promises.delete(s),(r?t:o)(i)}))}async register(e,s){return new Promise(((r,i)=>{this.promises.set(this.rid,[r,i]),this.worker.postMessage([this.rid,"register",{identifier:e,password:s}]),this.rid++}))}async login(e,s){return new Promise(((r,i)=>{this.promises.set(this.rid,[r,i]),this.worker.postMessage([this.rid,"login",{identifier:e,password:s}]),this.rid++}))}terminate(){this.worker.terminate()}}export{e as SRPClient};
