class s{rid=0;promises=new Map;worker=new Worker("/assets/js/worker.min.js");ready=new Promise((s=>{this.worker.addEventListener("message",(e=>"ready"===e.data&&s(!0)),{once:!0})}));constructor(){this.ready.then((()=>this.worker.onmessage=s=>{const[e,r,i]=s.data,[t,o]=this.promises.get(e);this.promises.delete(e),(r?t:o)(i)}))}async register(s,e){return new Promise(((r,i)=>{this.promises.set(this.rid,[r,i]),this.worker.postMessage([this.rid,"register",{identifier:s,password:e}]),this.rid++}))}async login(s,e){return new Promise(((r,i)=>{this.promises.set(this.rid,[r,i]),this.worker.postMessage([this.rid,"login",{identifier:s,password:e}]),this.rid++}))}async update(s,e){return new Promise(((r,i)=>{this.promises.set(this.rid,[r,i]),this.worker.postMessage([this.rid,"update_verifier",{identifier:s,password:e}]),this.rid++}))}terminate(){this.worker.terminate()}}export{s as SRPClient};
