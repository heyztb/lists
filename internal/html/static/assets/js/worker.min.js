function t(t,e=!1,a){const r=t.match(/^(0x)?([\da-fA-F]+)$/);if(null==r)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let i=r[2];if(void 0!==a){if(a<i.length/2)throw new RangeError(`expected byte length ${a} < input hex byte length ${Math.ceil(i.length/2)}`);i=i.padStart(2*a,"0")}return e?"0x"+i:i}function e(e,a=!1){let r=t(e);return r=t(e,!1,Math.ceil(r.length/2)),Uint8Array.from(r.match(/[\da-fA-F]{2}/g).map((t=>parseInt(t,16)))).buffer}(async()=>{importScripts("/assets/js/wasm_exec.js");const t=new Go,{instance:e}=await WebAssembly.instantiateStreaming(fetch("/assets/wasm/srp.wasm",{integrity:"sha384-GvKYPyi99AXVg0Lhgf0Wmz+/5capMDB7tBjqYm1+bQT0hwsVltHf113N8guk7wdm"}),t.importObject);await t.run(e)})(),self.onmessage=async function(t){const[a,r,i]=t.data,{identifier:s,password:n}=i;try{switch(r.toLowerCase()){case"register":const{salt:t,verifier:r}=await getRegistrationInfo(s,n),i=await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s,salt:t,verifier:r})}),o=await i.json();if(200!==i.status)throw new Error(o.error);self.postMessage([a,!0,!0]);case"login":const f=await fetch("/api/auth/identify",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s})}),w=await f.json();if(200!==f.status)throw new Error(w.error);const c=new Uint8Array(e(w.salt)),h=new Uint8Array(e(w.B)),l=await setupClient(s,n,c,h),p=await getClientProof(),g=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s,A:l,proof:p})}),d=await g.json();if(200!==g.status)throw new Error(d.error);const y=new Uint8Array(e(d.proof));if(!await verifyServerProof(y))throw new Error("invalid server proof");const m=await getKey();self.postMessage([a,!0,m]);default:self.postMessage([a,!1,new Error("invalid action")])}}catch(t){self.postMessage([a,!1,t])}},self.postMessage("ready");
