function e(e,t=!1,r){const a=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==a)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let i=a[2];if(void 0!==r){if(r<i.length/2)throw new RangeError(`expected byte length ${r} < input hex byte length ${Math.ceil(i.length/2)}`);i=i.padStart(2*r,"0")}return t?"0x"+i:i}function t(t,r=!1){let a=e(t);return a=e(t,!1,Math.ceil(a.length/2)),Uint8Array.from(a.match(/[\da-fA-F]{2}/g).map((e=>parseInt(e,16)))).buffer}(async()=>{importScripts("/assets/js/wasm_exec.js");const e=new Go,{instance:t}=await WebAssembly.instantiateStreaming(fetch("/assets/wasm/srp.wasm",{integrity:"sha384-GvKYPyi99AXVg0Lhgf0Wmz+/5capMDB7tBjqYm1+bQT0hwsVltHf113N8guk7wdm"}),e.importObject);await e.run(t)})(),self.onmessage=async e=>{const[r,a,i]=e.data,{identifier:s,password:n}=i;try{switch(a.toLowerCase()){case"register":{const{salt:e,verifier:t}=await getRegistrationInfo(s,n),a=await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s,salt:e,verifier:t})}),i=await a.json();if(200!==a.status)throw new Error(i.error);return void self.postMessage([r,!0,!0])}case"login":{const e=await fetch("/api/auth/identify",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s})}),a=await e.json();if(200!==e.status)throw new Error(a.error);const i=new Uint8Array(t(a.salt)),o=new Uint8Array(t(a.B)),f=await setupClient(s,n,i,o),w=await getClientProof(),c=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({identifier:s,A:f,proof:w})}),d=await c.json();if(200!==c.status)throw new Error(d.error);const h=new Uint8Array(t(d.proof));if(!await verifyServerProof(h))throw new Error("invalid server proof");const p=await getKey(),l={};return l.key=p,c.headers.has("HX-Redirect")&&(l.redirect=c.headers.get("HX-Redirect")),void self.postMessage([r,!0,l])}case"update_verifier":const{salt:e,verifier:a}=await getRegistrationInfo(s,n),i=await fetch("/api/auth/updateverifier",{method:"PATCH",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({identifier:s,s:e,v:a})});if(!i.ok)throw new Error(`Bad response: ${i.status} ${i.statusText}`);return void self.postMessage([r,!0,null]);default:self.postMessage([r,!1,new Error("invalid action")])}}catch(e){self.postMessage([r,!1,e])}},self.postMessage("ready");
