// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Items", testItems)
	t.Run("Labels", testLabels)
	t.Run("Lists", testLists)
	t.Run("Sections", testSections)
	t.Run("Settings", testSettings)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Items", testItemsDelete)
	t.Run("Labels", testLabelsDelete)
	t.Run("Lists", testListsDelete)
	t.Run("Sections", testSectionsDelete)
	t.Run("Settings", testSettingsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Items", testItemsQueryDeleteAll)
	t.Run("Labels", testLabelsQueryDeleteAll)
	t.Run("Lists", testListsQueryDeleteAll)
	t.Run("Sections", testSectionsQueryDeleteAll)
	t.Run("Settings", testSettingsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Items", testItemsSliceDeleteAll)
	t.Run("Labels", testLabelsSliceDeleteAll)
	t.Run("Lists", testListsSliceDeleteAll)
	t.Run("Sections", testSectionsSliceDeleteAll)
	t.Run("Settings", testSettingsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Items", testItemsExists)
	t.Run("Labels", testLabelsExists)
	t.Run("Lists", testListsExists)
	t.Run("Sections", testSectionsExists)
	t.Run("Settings", testSettingsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Items", testItemsFind)
	t.Run("Labels", testLabelsFind)
	t.Run("Lists", testListsFind)
	t.Run("Sections", testSectionsFind)
	t.Run("Settings", testSettingsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Items", testItemsBind)
	t.Run("Labels", testLabelsBind)
	t.Run("Lists", testListsBind)
	t.Run("Sections", testSectionsBind)
	t.Run("Settings", testSettingsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Items", testItemsOne)
	t.Run("Labels", testLabelsOne)
	t.Run("Lists", testListsOne)
	t.Run("Sections", testSectionsOne)
	t.Run("Settings", testSettingsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Items", testItemsAll)
	t.Run("Labels", testLabelsAll)
	t.Run("Lists", testListsAll)
	t.Run("Sections", testSectionsAll)
	t.Run("Settings", testSettingsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Items", testItemsCount)
	t.Run("Labels", testLabelsCount)
	t.Run("Lists", testListsCount)
	t.Run("Sections", testSectionsCount)
	t.Run("Settings", testSettingsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsHooks)
	t.Run("Items", testItemsHooks)
	t.Run("Labels", testLabelsHooks)
	t.Run("Lists", testListsHooks)
	t.Run("Sections", testSectionsHooks)
	t.Run("Settings", testSettingsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Items", testItemsInsert)
	t.Run("Items", testItemsInsertWhitelist)
	t.Run("Labels", testLabelsInsert)
	t.Run("Labels", testLabelsInsertWhitelist)
	t.Run("Lists", testListsInsert)
	t.Run("Lists", testListsInsertWhitelist)
	t.Run("Sections", testSectionsInsert)
	t.Run("Sections", testSectionsInsertWhitelist)
	t.Run("Settings", testSettingsInsert)
	t.Run("Settings", testSettingsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ItemToListUsingList", testItemToOneListUsingList)
	t.Run("ItemToSectionUsingSection", testItemToOneSectionUsingSection)
	t.Run("ItemToUserUsingCreator", testItemToOneUserUsingCreator)
	t.Run("ItemToItemUsingParent", testItemToOneItemUsingParent)
	t.Run("LabelToUserUsingUser", testLabelToOneUserUsingUser)
	t.Run("ListToUserUsingUser", testListToOneUserUsingUser)
	t.Run("ListToListUsingParent", testListToOneListUsingParent)
	t.Run("SectionToListUsingList", testSectionToOneListUsingList)
	t.Run("SettingToUserUsingUser", testSettingToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToSettingUsingSetting", testUserOneToOneSettingUsingSetting)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ItemToParentItems", testItemToManyParentItems)
	t.Run("ListToItems", testListToManyItems)
	t.Run("ListToParentLists", testListToManyParentLists)
	t.Run("ListToSections", testListToManySections)
	t.Run("SectionToItems", testSectionToManyItems)
	t.Run("UserToCreatorItems", testUserToManyCreatorItems)
	t.Run("UserToLabels", testUserToManyLabels)
	t.Run("UserToLists", testUserToManyLists)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ItemToListUsingItems", testItemToOneSetOpListUsingList)
	t.Run("ItemToSectionUsingItems", testItemToOneSetOpSectionUsingSection)
	t.Run("ItemToUserUsingCreatorItems", testItemToOneSetOpUserUsingCreator)
	t.Run("ItemToItemUsingParentItems", testItemToOneSetOpItemUsingParent)
	t.Run("LabelToUserUsingLabels", testLabelToOneSetOpUserUsingUser)
	t.Run("ListToUserUsingLists", testListToOneSetOpUserUsingUser)
	t.Run("ListToListUsingParentLists", testListToOneSetOpListUsingParent)
	t.Run("SectionToListUsingSections", testSectionToOneSetOpListUsingList)
	t.Run("SettingToUserUsingSetting", testSettingToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ItemToSectionUsingItems", testItemToOneRemoveOpSectionUsingSection)
	t.Run("ItemToItemUsingParentItems", testItemToOneRemoveOpItemUsingParent)
	t.Run("ListToListUsingParentLists", testListToOneRemoveOpListUsingParent)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToSettingUsingSetting", testUserOneToOneSetOpSettingUsingSetting)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ItemToParentItems", testItemToManyAddOpParentItems)
	t.Run("ListToItems", testListToManyAddOpItems)
	t.Run("ListToParentLists", testListToManyAddOpParentLists)
	t.Run("ListToSections", testListToManyAddOpSections)
	t.Run("SectionToItems", testSectionToManyAddOpItems)
	t.Run("UserToCreatorItems", testUserToManyAddOpCreatorItems)
	t.Run("UserToLabels", testUserToManyAddOpLabels)
	t.Run("UserToLists", testUserToManyAddOpLists)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ItemToParentItems", testItemToManySetOpParentItems)
	t.Run("ListToParentLists", testListToManySetOpParentLists)
	t.Run("SectionToItems", testSectionToManySetOpItems)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ItemToParentItems", testItemToManyRemoveOpParentItems)
	t.Run("ListToParentLists", testListToManyRemoveOpParentLists)
	t.Run("SectionToItems", testSectionToManyRemoveOpItems)
}

func TestReload(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Items", testItemsReload)
	t.Run("Labels", testLabelsReload)
	t.Run("Lists", testListsReload)
	t.Run("Sections", testSectionsReload)
	t.Run("Settings", testSettingsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Items", testItemsReloadAll)
	t.Run("Labels", testLabelsReloadAll)
	t.Run("Lists", testListsReloadAll)
	t.Run("Sections", testSectionsReloadAll)
	t.Run("Settings", testSettingsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Items", testItemsSelect)
	t.Run("Labels", testLabelsSelect)
	t.Run("Lists", testListsSelect)
	t.Run("Sections", testSectionsSelect)
	t.Run("Settings", testSettingsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Items", testItemsUpdate)
	t.Run("Labels", testLabelsUpdate)
	t.Run("Lists", testListsUpdate)
	t.Run("Sections", testSectionsUpdate)
	t.Run("Settings", testSettingsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Items", testItemsSliceUpdateAll)
	t.Run("Labels", testLabelsSliceUpdateAll)
	t.Run("Lists", testListsSliceUpdateAll)
	t.Run("Sections", testSectionsSliceUpdateAll)
	t.Run("Settings", testSettingsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
