// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSections(t *testing.T) {
	t.Parallel()

	query := Sections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Section exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SectionExists to return true, but got false.")
	}
}

func testSectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sectionFound, err := FindSection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sectionOne := &Section{}
	sectionTwo := &Section{}
	if err = randomize.Struct(seed, sectionOne, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err = randomize.Struct(seed, sectionTwo, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sectionOne := &Section{}
	sectionTwo := &Section{}
	if err = randomize.Struct(seed, sectionOne, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err = randomize.Struct(seed, sectionTwo, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func testSectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Section{}
	o := &Section{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Section object: %s", err)
	}

	AddSectionHook(boil.BeforeInsertHook, sectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sectionBeforeInsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterInsertHook, sectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sectionAfterInsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterSelectHook, sectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sectionAfterSelectHooks = []SectionHook{}

	AddSectionHook(boil.BeforeUpdateHook, sectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sectionBeforeUpdateHooks = []SectionHook{}

	AddSectionHook(boil.AfterUpdateHook, sectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sectionAfterUpdateHooks = []SectionHook{}

	AddSectionHook(boil.BeforeDeleteHook, sectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sectionBeforeDeleteHooks = []SectionHook{}

	AddSectionHook(boil.AfterDeleteHook, sectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sectionAfterDeleteHooks = []SectionHook{}

	AddSectionHook(boil.BeforeUpsertHook, sectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sectionBeforeUpsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterUpsertHook, sectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sectionAfterUpsertHooks = []SectionHook{}
}

func testSectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSectionToManyItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, itemDBTypes, false, itemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, itemDBTypes, false, itemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SectionID, a.ID)
	queries.Assign(&c.SectionID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Items().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SectionID, b.SectionID) {
			bFound = true
		}
		if queries.Equal(v.SectionID, c.SectionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SectionSlice{&a}
	if err = a.L.LoadItems(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Items); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Items = nil
	if err = a.L.LoadItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Items); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSectionToManyAddOpItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c, d, e Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Item{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Item{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SectionID) {
			t.Error("foreign key was wrong value", a.ID, first.SectionID)
		}
		if !queries.Equal(a.ID, second.SectionID) {
			t.Error("foreign key was wrong value", a.ID, second.SectionID)
		}

		if first.R.Section != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Section != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Items[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Items[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Items().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSectionToManySetOpItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c, d, e Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Item{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Items().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Items().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SectionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SectionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SectionID) {
		t.Error("foreign key was wrong value", a.ID, d.SectionID)
	}
	if !queries.Equal(a.ID, e.SectionID) {
		t.Error("foreign key was wrong value", a.ID, e.SectionID)
	}

	if b.R.Section != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Section != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Section != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Section != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Items[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Items[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSectionToManyRemoveOpItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c, d, e Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Item{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Items().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Items().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SectionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SectionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Section != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Section != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Section != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Section != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Items) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Items[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Items[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSectionToOneListUsingList(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign List

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ListID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.List().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddListHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *List) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadList(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.List == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.List = nil
	if err = local.L.LoadList(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.List == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOneSetOpListUsingList(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c List

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*List{&b, &c} {
		err = a.SetList(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.List != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ListID != x.ID {
			t.Error("foreign key was wrong value", a.ListID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ListID))
		reflect.Indirect(reflect.ValueOf(&a.ListID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ListID != x.ID {
			t.Error("foreign key was wrong value", a.ListID, x.ID)
		}
	}
}

func testSectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sectionDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `bigint`, `ListID`: `bigint`, `Name`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testSectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sectionAllColumns, sectionPrimaryKeyColumns) {
		fields = sectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			sectionAllColumns,
			sectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSectionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Section{}
	if err = randomize.Struct(seed, &o, sectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Section: %s", err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sectionDBTypes, false, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Section: %s", err)
	}

	count, err = Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
